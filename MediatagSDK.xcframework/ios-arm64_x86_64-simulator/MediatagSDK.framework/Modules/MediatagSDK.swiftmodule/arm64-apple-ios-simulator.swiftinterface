// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MediatagSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import Darwin
import Foundation
@_exported import MediatagSDK
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct Event : Swift.Equatable, Swift.Hashable {
  public init(contactType: MediatagSDK.ContactType!, view: MediatagSDK.EventType? = nil, idc: Swift.Int? = nil, idlc: Swift.String? = nil, fts: Swift.Int64? = nil, urlc: Swift.String? = nil, media: Swift.String? = nil, ver: Swift.Int? = nil)
  public init(contactType: MediatagSDK.ContactType)
  public var tsu: Swift.Int {
    get
  }
  public var type: MediatagSDK.ContactType! {
    get
  }
  public var view: MediatagSDK.EventType?
  public var ver: Swift.Int?
  public var idc: Swift.Int?
  public var fts: Swift.Int64?
  public var idlc: Swift.String?
  public var urlc: Swift.String?
  public var media: Swift.String?
  public func toQuery(mapQuery: @escaping ((_ query: [Swift.String : Any?]) -> Swift.String)) -> Swift.String
  public static func == (a: MediatagSDK.Event, b: MediatagSDK.Event) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class NSEvent : ObjectiveC.NSObject {
  public init(contactType: Swift.Int, view: Swift.Int?, idc: Swift.Int?, idlc: Swift.String?, fts: Swift.Int64?, urlc: Swift.String?, media: Swift.String?, ver: Swift.Int?)
  public init(contactType: Swift.Int)
  @objc deinit
}
public struct RingBuffer<T> {
  public typealias BufferTarget = (item: T?, at: Swift.Int)
  public var state: [T] {
    get
  }
  public init(count: Swift.Int)
  public mutating func write(_ element: T)
  public mutating func clear(atIndex: Swift.Int)
  public mutating func read() -> MediatagSDK.RingBuffer<T>.BufferTarget?
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFull: Swift.Bool {
    get
  }
}
public typealias RequestMap = ((_ request: Foundation.NSMutableURLRequest) -> Foundation.NSMutableURLRequest)
public protocol NSConfigurationType : ObjectiveC.NSObject, MediatagSDK.ConfigurationType {
}
@objc public class NSConfiguration : ObjectiveC.NSObject, MediatagSDK.NSConfigurationType {
  public var plugins: [MediatagSDK.PluginTypeEnum]?
  @objc public var hid: Swift.String?
  @objc public var uid: Swift.String?
  @objc public var cid: Swift.String {
    get
  }
  @objc public var tms: Swift.String {
    get
  }
  @objc public var baseUrl: Foundation.URL
  @objc public var encodingCharacterSet: Swift.String
  @objc public var encodingSet: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public var dataManager: MediatagSDK.SdkDataManager?
  @objc public var heartbeatInterval: Swift.Double
  public var uidc: Swift.Int?
  @objc public var uIdc: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public init(cid: Swift.String, tms: Swift.String, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  @objc public init(cid: Swift.String, tms: Swift.String)
  @objc public func setPlugin(withBase: Swift.Bool = true, modify: MediatagSDK.RequestMap?)
  @objc deinit
}
@objc public protocol SdkDataManager {
  @objc func getItems(for key: Swift.String) -> [Swift.String]
  @objc func setItems(items: [Swift.String], into key: Swift.String)
}
@_hasMissingDesignatedInitializers public class UserDefaultsDataManager : MediatagSDK.SdkDataManager {
  @objc public func getItems(for key: Swift.String) -> [Swift.String]
  @objc public func setItems(items: [Swift.String], into key: Swift.String)
  @objc deinit
}
public typealias Action = (_ success: Swift.Bool, _ url: Foundation.URL) -> Swift.Void
public protocol RequestConfiguration : AnyObject {
  var baseUrl: Foundation.URL { get }
  var plugins: [MediatagSDK.PluginTypeEnum] { get }
  var encodingCharacterSet: Swift.String { get }
  var encodingSet: [Swift.String : Swift.String] { get }
  var heartbeatInterval: Foundation.TimeInterval { get }
  var sendingQueueBufferSize: Swift.Int { get }
  var dataManager: MediatagSDK.SdkDataManager? { get }
  func toQuery() -> [Swift.String : Any?]
  func mapQuery(items: [Swift.String : Any?]) -> Swift.String
  func buildURL(query: Swift.String) -> Foundation.URL
}
public protocol ConfigurationType : MediatagSDK.RequestConfiguration {
  var uid: Swift.String? { get set }
  var hid: Swift.String? { get set }
  var uidc: Swift.Int? { get set }
  var cid: Swift.String { get }
  var tms: Swift.String { get }
}
@objc public class NSMediatagSDK : ObjectiveC.NSObject {
  @objc public static var shared: MediatagSDK.NSMediatagSDK {
    @objc get
  }
  @objc public init(configuration: MediatagSDK.NSConfiguration)
  @objc convenience public init(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  @objc public func setConfiguration(configuration: MediatagSDK.NSConfiguration)
  @objc public func updateConfiguration(uid: Swift.String?, hid: Swift.String?, uidc: Foundation.NSNumber?)
  @objc public func next(contactType: Foundation.NSNumber, view: Foundation.NSNumber?, idc: Foundation.NSNumber?, idlc: Foundation.NSString?, urlc: Foundation.NSString?, media: Swift.String?, ver: Foundation.NSNumber?, fts: Foundation.NSString?)
  @objc public func getSendingQueue() -> [Swift.String]
  @objc public func getSendingAbility() -> Swift.Bool
  @objc public func getUserAttributes(original: Swift.Bool = false) -> Foundation.NSMutableDictionary
  @objc deinit
}
extension MediatagSDK.ConfigurationType {
  public var sendingQueueBufferSize: Swift.Int {
    get
  }
  public var heartbeatInterval: Foundation.TimeInterval {
    get
  }
  public var plugins: [MediatagSDK.PluginTypeEnum] {
    get
  }
  public var baseUrl: Foundation.URL {
    get
  }
  public var encodingCharacterSet: Swift.String {
    get
  }
  public var encodingSet: [Swift.String : Swift.String] {
    get
  }
  public func toQuery() -> [Swift.String : Any?]
  public var dataManager: MediatagSDK.SdkDataManager? {
    get
  }
  public func mapQuery(items: [Swift.String : Any?]) -> Swift.String
  public func buildURL(query: Swift.String) -> Foundation.URL
  public func prepareQueryItemValue(encodingSet: inout [Swift.String : Swift.String], key: Swift.String, value: Any) -> Swift.String?
}
public protocol PluginType {
  func prepare(_ request: Foundation.URLRequest) -> Foundation.URLRequest
}
public enum PluginTypeEnum : MediatagSDK.PluginType {
  case customPlugin(MediatagSDK.PluginType)
  case customFunction((_ request: Foundation.NSMutableURLRequest) -> Foundation.NSMutableURLRequest)
  public func prepare(_ request: Foundation.URLRequest) -> Foundation.URLRequest
}
public enum ContactType : Swift.Int {
  case undefined
  case liveStream
  case vod
  case catchUp
  case article
  case socialMediaPost
  case liveAudio
  case audioByRequest
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EventType : Swift.Int {
  case stop, start, heartBeat, pause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum QueryKeys : Swift.String {
  case cid
  case tms
  case uid
  case hid
  case idc
  case type
  case uidc
  case idlc
  case view
  case fts
  case urlc
  case media
  case ver
  case tsu
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class Mediatag {
  final public var configuration: MediatagSDK.ConfigurationType! {
    get
  }
  final public var sendingIsAvailable: Swift.Bool {
    get
  }
  public static let shared: MediatagSDK.Mediatag
  public init(configuration: MediatagSDK.ConfigurationType, plugins: [MediatagSDK.PluginType] = [])
  convenience public init(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  final public func setConfiguration(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  final public func setConfiguration(configuration: MediatagSDK.ConfigurationType)
  final public func updateConfiguration(uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Swift.Int? = nil)
  final public func next(_ event: MediatagSDK.Event)
  final public func stop()
  @objc deinit
}
extension MediatagSDK.Mediatag {
  final public var sendingQueue: [Swift.String] {
    get
    set
  }
  final public func getUserAttributes(original: Swift.Bool = false) -> [Swift.String : Any]
}
extension MediatagSDK.ContactType : Swift.Equatable {}
extension MediatagSDK.ContactType : Swift.Hashable {}
extension MediatagSDK.ContactType : Swift.RawRepresentable {}
extension MediatagSDK.EventType : Swift.Equatable {}
extension MediatagSDK.EventType : Swift.Hashable {}
extension MediatagSDK.EventType : Swift.RawRepresentable {}
extension MediatagSDK.QueryKeys : Swift.Equatable {}
extension MediatagSDK.QueryKeys : Swift.Hashable {}
extension MediatagSDK.QueryKeys : Swift.RawRepresentable {}
