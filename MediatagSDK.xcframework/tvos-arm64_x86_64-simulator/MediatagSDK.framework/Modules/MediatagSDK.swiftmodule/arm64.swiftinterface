// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 effective-4.1.50 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -Onone -module-name MediatagSDK
import AdSupport
import AppTrackingTransparency
import Darwin
import Foundation
@_exported import MediatagSDK
import Network
import Swift
import UIKit
public struct Event : Swift.Equatable, Swift.Hashable {
  public var tsu: Swift.Int {
    get
  }
  public var type: Swift.Int! {
    get
  }
  public var view: MediatagSDK.EventType?
  public var ver: Swift.Int?
  public var idc: Swift.Int?
  public var fts: Swift.Int64?
  public var idlc: Swift.String?
  public var urlc: Swift.String?
  public var media: Swift.String?
  public var params: Swift.Dictionary<Swift.String, Swift.String>?
  public var paramsOnly: Swift.Bool
  public init(contactType: MediatagSDK.ContactType!, view: MediatagSDK.EventType? = nil, idc: Swift.Int? = nil, idlc: Swift.String? = nil, fts: Swift.Int64? = nil, urlc: Swift.String? = nil, media: Swift.String? = nil, ver: Swift.Int? = nil)
  public init(contactType: MediatagSDK.ContactType)
  public init(params: Swift.Dictionary<Swift.String, Swift.String>?)
  public mutating func extend(with params: Swift.Dictionary<Swift.String, Swift.String>? = nil) -> MediatagSDK.Event
  public func paramsToQuery(reduce: ((inout MediatagSDK.ExtQueryBuilder, MediatagSDK.Next, Swift.Int) -> Swift.Void), maxLenght: Swift.Int) -> Swift.String
  public func toQuery(mapQuery: @escaping (([Swift.String : Any?]) -> Swift.String)) -> Swift.String
  public static func == (a: MediatagSDK.Event, b: MediatagSDK.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct RingBuffer<T> {
  public typealias BufferTarget = (item: T?, at: Swift.Int)
  public var state: [T] {
    get
  }
  public init(count: Swift.Int)
  public mutating func write(_ element: T)
  public mutating func clear(atIndex: Swift.Int)
  public mutating func read() -> MediatagSDK.RingBuffer<T>.BufferTarget?
  public var isEmpty: Swift.Bool {
    get
  }
  public var isFull: Swift.Bool {
    get
  }
}
public typealias RequestMap = ((Foundation.NSMutableURLRequest) -> Foundation.NSMutableURLRequest)
public protocol NSConfigurationType : ObjectiveC.NSObject, MediatagSDK.ConfigurationType {
}
@objc public class NSConfiguration : ObjectiveC.NSObject, MediatagSDK.NSConfigurationType {
  public var plugins: [MediatagSDK.PluginTypeEnum]
  @objc public var hid: Swift.String?
  @objc public var uid: Swift.String?
  @objc public var cid: Swift.String {
    get
  }
  @objc public var tms: Swift.String {
    get
  }
  @objc public var baseUrl: Foundation.URL
  @objc public var encodingCharacterSet: Swift.String
  @objc public var encodingSet: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
    @objc set(value)
  }
  @objc public var dataManager: MediatagSDK.SdkDataManager?
  @objc public var heartbeatInterval: Swift.Double
  @objc public var sendingQueueBufferSize: Swift.Int
  @objc public var uidc: Foundation.NSNumber?
  @objc public init(cid: Swift.String, tms: Swift.String, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  @objc public init(cid: Swift.String, tms: Swift.String)
  @objc public func setPlugin(modify: MediatagSDK.RequestMap?)
  @objc deinit
  @objc override dynamic public init()
}
public typealias Action = (Swift.Bool, Swift.String) -> Swift.Void
@objc public protocol SdkDataManager {
  @objc func getItems(for key: Swift.String) -> [Swift.String]
  @objc func setItems(items: [Swift.String], into key: Swift.String)
}
@_hasMissingDesignatedInitializers public class UserDefaultsDataManager : MediatagSDK.SdkDataManager {
  @objc public func getItems(for key: Swift.String) -> [Swift.String]
  @objc public func setItems(items: [Swift.String], into key: Swift.String)
  @objc deinit
}
public protocol RequestConfiguration : AnyObject {
  var baseUrl: Foundation.URL { get }
  var plugins: [MediatagSDK.PluginTypeEnum] { get }
  var encodingCharacterSet: Swift.String { get }
  var encodingSet: Swift.Dictionary<Swift.String, Swift.String> { get }
  var heartbeatInterval: Foundation.TimeInterval { get }
  var sendingQueueBufferSize: Swift.Int { get }
  var dataManager: MediatagSDK.SdkDataManager? { get }
  func toQuery() -> [Swift.String : Any?]
  func mapQuery(items: [Swift.String : Any?]) -> Swift.String
  func buildURL(query: Swift.String) -> Swift.String
  func reducdeExtParams(builder: inout MediatagSDK.ExtQueryBuilder, next: Swift.Dictionary<Swift.String, Swift.String>.Element, maxCount: Swift.Int)
}
public protocol ConfigurationType : MediatagSDK.RequestConfiguration {
  var uid: Swift.String? { get set }
  var hid: Swift.String? { get set }
  var uidc: Foundation.NSNumber? { get set }
  var cid: Swift.String { get }
  var tms: Swift.String { get }
}
@objc public class NSMediatagSDK : ObjectiveC.NSObject {
  @objc public static var shared: MediatagSDK.NSMediatagSDK {
    @objc get
  }
  @objc public init(configuration: MediatagSDK.NSConfiguration)
  @objc public convenience init(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  @objc public func setConfiguration(configuration: MediatagSDK.NSConfiguration)
  @objc public func updateConfiguration(uid: Swift.String?, hid: Swift.String?, uidc: Foundation.NSNumber?)
  @objc public func next(contactType: Foundation.NSNumber, view: Foundation.NSNumber?, idc: Foundation.NSNumber?, idlc: Foundation.NSString?, urlc: Foundation.NSString?, media: Swift.String?, ver: Foundation.NSNumber?, fts: Foundation.NSString?)
  @objc public func next(params: Foundation.NSDictionary)
  @objc public func getSendingQueue() -> [Swift.String]
  @objc public func getSendingAbility() -> Swift.Bool
  @objc public func getUserAttributes(original: Swift.Bool = false) -> Foundation.NSMutableDictionary
  @objc deinit
  @objc override dynamic public init()
}
extension ConfigurationType {
  public var sendingQueueBufferSize: Swift.Int {
    get
  }
  public var heartbeatInterval: Foundation.TimeInterval {
    get
  }
  public var plugins: [MediatagSDK.PluginTypeEnum] {
    get
  }
  public var baseUrl: Foundation.URL {
    get
  }
  public var encodingCharacterSet: Swift.String {
    get
  }
  public var encodingSet: Swift.Dictionary<Swift.String, Swift.String> {
    get
  }
  public func toQuery() -> [Swift.String : Any?]
  public var dataManager: MediatagSDK.SdkDataManager? {
    get
  }
  public func mapQuery(items: [Swift.String : Any?]) -> Swift.String
  public func buildURL(query: Swift.String) -> Swift.String
  public func prepareQueryItemValue(encodingSet: inout Swift.Dictionary<Swift.String, Swift.String>, key: Swift.String, value: Any) -> Swift.String?
  public func reducdeExtParams(builder: inout MediatagSDK.ExtQueryBuilder, next: Swift.Dictionary<Swift.String, Swift.String>.Element, maxCount: Swift.Int)
}
public protocol PluginType {
  func prepare(_ request: Foundation.URLRequest) -> Foundation.URLRequest
}
public enum PluginTypeEnum : MediatagSDK.PluginType {
  case customPlugin(MediatagSDK.PluginType)
  case customFunction((Foundation.NSMutableURLRequest) -> Foundation.NSMutableURLRequest)
  public func prepare(_ request: Foundation.URLRequest) -> Foundation.URLRequest
}
@_hasMissingDesignatedInitializers public class PrepareQuery : MediatagSDK.PluginType {
  public func prepare(_ request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc deinit
}
@objc public enum ContactType : Swift.Int {
  case undefined = 0
  case liveStream
  case vod
  case catchUp
  case article
  case socialMediaPost
  case liveAudio
  case audioByRequest
  case userExtended
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum EventType : Swift.Int {
  case stop
  case start
  case heartBeat
  case pause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum QueryKeys : Swift.String {
  case cid
  case tms
  case uid
  case hid
  case idc
  case type
  case uidc
  case idlc
  case view
  case fts
  case urlc
  case media
  case ver
  case tsu
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias Next = Swift.Dictionary<Swift.String, Swift.String>.Element
public typealias ExtReducer = (inout MediatagSDK.ExtQueryBuilder, MediatagSDK.Next, Swift.Int) -> Swift.Void
public struct ExtQueryBuilder {
  public var result: Swift.String {
    get
  }
  public var left: Swift.String {
    get
  }
  public var iteration: Swift.Int {
    get
  }
  public var validation: Swift.Int
  public var end: Swift.Bool
  public mutating func checkOut(_ value: Swift.String, max: Swift.Int, error: Swift.Int) -> Swift.String
  public mutating func append(key: Swift.String, value: Swift.String, maxCount: Swift.Int, keyRexeg: Swift.String = #"^[a-z0-9](\w*)$"#, keyPrefix: Swift.String = "ext_")
}
final public class Mediatag {
  final public var configuration: MediatagSDK.ConfigurationType! {
    get
  }
  final public var sendingIsAvailable: Swift.Bool {
    get
  }
  public static var shared: MediatagSDK.Mediatag
  public init(configuration: MediatagSDK.ConfigurationType, plugins: [MediatagSDK.PluginType] = [])
  public convenience init(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  final public func setConfiguration(cid: Swift.String, tms: Swift.String!, uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  final public func setConfiguration(configuration: MediatagSDK.ConfigurationType)
  final public func updateConfiguration(uid: Swift.String? = nil, hid: Swift.String? = nil, uidc: Foundation.NSNumber? = nil)
  final public func next(_ event: MediatagSDK.Event)
  final public func stop()
  @objc deinit
}
extension Mediatag {
  final public var sendingQueue: [Swift.String] {
    get
    set(newValue)
  }
  final public func getUserAttributes(original: Swift.Bool = false) -> [Swift.String : Any]
}
